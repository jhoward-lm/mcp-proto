// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mcp/api/v1/server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	client "pkg/mcp/client"
	server "pkg/mcp/server"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerNotificationService_Cancelled_FullMethodName           = "/mcp.api.v1.ServerNotificationService/Cancelled"
	ServerNotificationService_Message_FullMethodName             = "/mcp.api.v1.ServerNotificationService/Message"
	ServerNotificationService_Progress_FullMethodName            = "/mcp.api.v1.ServerNotificationService/Progress"
	ServerNotificationService_PromptListChanged_FullMethodName   = "/mcp.api.v1.ServerNotificationService/PromptListChanged"
	ServerNotificationService_ResourceListChanged_FullMethodName = "/mcp.api.v1.ServerNotificationService/ResourceListChanged"
	ServerNotificationService_ResourceUpdated_FullMethodName     = "/mcp.api.v1.ServerNotificationService/ResourceUpdated"
	ServerNotificationService_ToolListChanged_FullMethodName     = "/mcp.api.v1.ServerNotificationService/ToolListChanged"
)

// ServerNotificationServiceClient is the client API for ServerNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service describing notifications sent by the server.
type ServerNotificationServiceClient interface {
	// Notify that a previously-issued request is being cancelled.
	Cancelled(ctx context.Context, in *server.CancelledNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send a log message to the client.
	Message(ctx context.Context, in *server.LoggingMessageNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send a progress notification.
	Progress(ctx context.Context, in *server.ProgressNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify that the list of prompts has changed.
	PromptListChanged(ctx context.Context, in *server.PromptListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify that the list of resources has changed.
	ResourceListChanged(ctx context.Context, in *server.ResourceListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify that a specific resource has been updated.
	ResourceUpdated(ctx context.Context, in *server.ResourceUpdatedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify that the list of tools has changed.
	ToolListChanged(ctx context.Context, in *server.ToolListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serverNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerNotificationServiceClient(cc grpc.ClientConnInterface) ServerNotificationServiceClient {
	return &serverNotificationServiceClient{cc}
}

func (c *serverNotificationServiceClient) Cancelled(ctx context.Context, in *server.CancelledNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_Cancelled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) Message(ctx context.Context, in *server.LoggingMessageNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_Message_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) Progress(ctx context.Context, in *server.ProgressNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_Progress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) PromptListChanged(ctx context.Context, in *server.PromptListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_PromptListChanged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) ResourceListChanged(ctx context.Context, in *server.ResourceListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_ResourceListChanged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) ResourceUpdated(ctx context.Context, in *server.ResourceUpdatedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_ResourceUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNotificationServiceClient) ToolListChanged(ctx context.Context, in *server.ToolListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerNotificationService_ToolListChanged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerNotificationServiceServer is the server API for ServerNotificationService service.
// All implementations must embed UnimplementedServerNotificationServiceServer
// for forward compatibility.
//
// Service describing notifications sent by the server.
type ServerNotificationServiceServer interface {
	// Notify that a previously-issued request is being cancelled.
	Cancelled(context.Context, *server.CancelledNotification) (*emptypb.Empty, error)
	// Send a log message to the client.
	Message(context.Context, *server.LoggingMessageNotification) (*emptypb.Empty, error)
	// Send a progress notification.
	Progress(context.Context, *server.ProgressNotification) (*emptypb.Empty, error)
	// Notify that the list of prompts has changed.
	PromptListChanged(context.Context, *server.PromptListChangedNotification) (*emptypb.Empty, error)
	// Notify that the list of resources has changed.
	ResourceListChanged(context.Context, *server.ResourceListChangedNotification) (*emptypb.Empty, error)
	// Notify that a specific resource has been updated.
	ResourceUpdated(context.Context, *server.ResourceUpdatedNotification) (*emptypb.Empty, error)
	// Notify that the list of tools has changed.
	ToolListChanged(context.Context, *server.ToolListChangedNotification) (*emptypb.Empty, error)
	mustEmbedUnimplementedServerNotificationServiceServer()
}

// UnimplementedServerNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerNotificationServiceServer struct{}

func (UnimplementedServerNotificationServiceServer) Cancelled(context.Context, *server.CancelledNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancelled not implemented")
}
func (UnimplementedServerNotificationServiceServer) Message(context.Context, *server.LoggingMessageNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedServerNotificationServiceServer) Progress(context.Context, *server.ProgressNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedServerNotificationServiceServer) PromptListChanged(context.Context, *server.PromptListChangedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptListChanged not implemented")
}
func (UnimplementedServerNotificationServiceServer) ResourceListChanged(context.Context, *server.ResourceListChangedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceListChanged not implemented")
}
func (UnimplementedServerNotificationServiceServer) ResourceUpdated(context.Context, *server.ResourceUpdatedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceUpdated not implemented")
}
func (UnimplementedServerNotificationServiceServer) ToolListChanged(context.Context, *server.ToolListChangedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolListChanged not implemented")
}
func (UnimplementedServerNotificationServiceServer) mustEmbedUnimplementedServerNotificationServiceServer() {
}
func (UnimplementedServerNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeServerNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerNotificationServiceServer will
// result in compilation errors.
type UnsafeServerNotificationServiceServer interface {
	mustEmbedUnimplementedServerNotificationServiceServer()
}

func RegisterServerNotificationServiceServer(s grpc.ServiceRegistrar, srv ServerNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerNotificationService_ServiceDesc, srv)
}

func _ServerNotificationService_Cancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.CancelledNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).Cancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_Cancelled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).Cancelled(ctx, req.(*server.CancelledNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.LoggingMessageNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_Message_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).Message(ctx, req.(*server.LoggingMessageNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ProgressNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).Progress(ctx, req.(*server.ProgressNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_PromptListChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.PromptListChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).PromptListChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_PromptListChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).PromptListChanged(ctx, req.(*server.PromptListChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_ResourceListChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ResourceListChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).ResourceListChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_ResourceListChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).ResourceListChanged(ctx, req.(*server.ResourceListChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_ResourceUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ResourceUpdatedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).ResourceUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_ResourceUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).ResourceUpdated(ctx, req.(*server.ResourceUpdatedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNotificationService_ToolListChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ToolListChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNotificationServiceServer).ToolListChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNotificationService_ToolListChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNotificationServiceServer).ToolListChanged(ctx, req.(*server.ToolListChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerNotificationService_ServiceDesc is the grpc.ServiceDesc for ServerNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.api.v1.ServerNotificationService",
	HandlerType: (*ServerNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancelled",
			Handler:    _ServerNotificationService_Cancelled_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _ServerNotificationService_Message_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _ServerNotificationService_Progress_Handler,
		},
		{
			MethodName: "PromptListChanged",
			Handler:    _ServerNotificationService_PromptListChanged_Handler,
		},
		{
			MethodName: "ResourceListChanged",
			Handler:    _ServerNotificationService_ResourceListChanged_Handler,
		},
		{
			MethodName: "ResourceUpdated",
			Handler:    _ServerNotificationService_ResourceUpdated_Handler,
		},
		{
			MethodName: "ToolListChanged",
			Handler:    _ServerNotificationService_ToolListChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp/api/v1/server.proto",
}

const (
	ServerService_CallTool_FullMethodName              = "/mcp.api.v1.ServerService/CallTool"
	ServerService_Complete_FullMethodName              = "/mcp.api.v1.ServerService/Complete"
	ServerService_GetPrompt_FullMethodName             = "/mcp.api.v1.ServerService/GetPrompt"
	ServerService_Initialize_FullMethodName            = "/mcp.api.v1.ServerService/Initialize"
	ServerService_ListPrompts_FullMethodName           = "/mcp.api.v1.ServerService/ListPrompts"
	ServerService_ListResources_FullMethodName         = "/mcp.api.v1.ServerService/ListResources"
	ServerService_ListResourceTemplates_FullMethodName = "/mcp.api.v1.ServerService/ListResourceTemplates"
	ServerService_ListTools_FullMethodName             = "/mcp.api.v1.ServerService/ListTools"
	ServerService_Ping_FullMethodName                  = "/mcp.api.v1.ServerService/Ping"
	ServerService_ReadResource_FullMethodName          = "/mcp.api.v1.ServerService/ReadResource"
	ServerService_SetLevel_FullMethodName              = "/mcp.api.v1.ServerService/SetLevel"
	ServerService_Subscribe_FullMethodName             = "/mcp.api.v1.ServerService/Subscribe"
	ServerService_Unsubscribe_FullMethodName           = "/mcp.api.v1.ServerService/Unsubscribe"
)

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service describing available methods exposed by an MCP server.
type ServerServiceClient interface {
	// Invoke a tool by name.
	CallTool(ctx context.Context, in *client.CallToolRequest, opts ...grpc.CallOption) (*server.CallToolResult, error)
	// Ask for completion options.
	Complete(ctx context.Context, in *client.CompleteRequest, opts ...grpc.CallOption) (*server.CompleteResult, error)
	// Retrieve a single prompt by name.
	GetPrompt(ctx context.Context, in *client.GetPromptRequest, opts ...grpc.CallOption) (*server.GetPromptResult, error)
	// Initiate the connection with the server.
	Initialize(ctx context.Context, in *client.InitializeRequest, opts ...grpc.CallOption) (*server.InitializeResult, error)
	// List available prompts.
	ListPrompts(ctx context.Context, in *client.ListPromptsRequest, opts ...grpc.CallOption) (*server.ListPromptsResult, error)
	// List available resources.
	ListResources(ctx context.Context, in *client.ListResourcesRequest, opts ...grpc.CallOption) (*server.ListResourcesResult, error)
	// List available resource templates.
	ListResourceTemplates(ctx context.Context, in *client.ListResourceTemplatesRequest, opts ...grpc.CallOption) (*server.ListResourceTemplatesResult, error)
	// List available tools.
	ListTools(ctx context.Context, in *client.ListToolsRequest, opts ...grpc.CallOption) (*server.ListToolsResult, error)
	// Ping the other party to check if it is still alive.
	Ping(ctx context.Context, in *client.PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Read a specific resource by URI.
	ReadResource(ctx context.Context, in *client.ReadResourceRequest, opts ...grpc.CallOption) (*server.ReadResourceResult, error)
	// Set the minimum log level for notifications.
	SetLevel(ctx context.Context, in *client.SetLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request resources/updated notifications for a resource.
	Subscribe(ctx context.Context, in *client.SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request cancellation of resources/updated notifications.
	Unsubscribe(ctx context.Context, in *client.UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) CallTool(ctx context.Context, in *client.CallToolRequest, opts ...grpc.CallOption) (*server.CallToolResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.CallToolResult)
	err := c.cc.Invoke(ctx, ServerService_CallTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Complete(ctx context.Context, in *client.CompleteRequest, opts ...grpc.CallOption) (*server.CompleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.CompleteResult)
	err := c.cc.Invoke(ctx, ServerService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetPrompt(ctx context.Context, in *client.GetPromptRequest, opts ...grpc.CallOption) (*server.GetPromptResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.GetPromptResult)
	err := c.cc.Invoke(ctx, ServerService_GetPrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Initialize(ctx context.Context, in *client.InitializeRequest, opts ...grpc.CallOption) (*server.InitializeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.InitializeResult)
	err := c.cc.Invoke(ctx, ServerService_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListPrompts(ctx context.Context, in *client.ListPromptsRequest, opts ...grpc.CallOption) (*server.ListPromptsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ListPromptsResult)
	err := c.cc.Invoke(ctx, ServerService_ListPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListResources(ctx context.Context, in *client.ListResourcesRequest, opts ...grpc.CallOption) (*server.ListResourcesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ListResourcesResult)
	err := c.cc.Invoke(ctx, ServerService_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListResourceTemplates(ctx context.Context, in *client.ListResourceTemplatesRequest, opts ...grpc.CallOption) (*server.ListResourceTemplatesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ListResourceTemplatesResult)
	err := c.cc.Invoke(ctx, ServerService_ListResourceTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListTools(ctx context.Context, in *client.ListToolsRequest, opts ...grpc.CallOption) (*server.ListToolsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ListToolsResult)
	err := c.cc.Invoke(ctx, ServerService_ListTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Ping(ctx context.Context, in *client.PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ReadResource(ctx context.Context, in *client.ReadResourceRequest, opts ...grpc.CallOption) (*server.ReadResourceResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ReadResourceResult)
	err := c.cc.Invoke(ctx, ServerService_ReadResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetLevel(ctx context.Context, in *client.SetLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerService_SetLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Subscribe(ctx context.Context, in *client.SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Unsubscribe(ctx context.Context, in *client.UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility.
//
// Service describing available methods exposed by an MCP server.
type ServerServiceServer interface {
	// Invoke a tool by name.
	CallTool(context.Context, *client.CallToolRequest) (*server.CallToolResult, error)
	// Ask for completion options.
	Complete(context.Context, *client.CompleteRequest) (*server.CompleteResult, error)
	// Retrieve a single prompt by name.
	GetPrompt(context.Context, *client.GetPromptRequest) (*server.GetPromptResult, error)
	// Initiate the connection with the server.
	Initialize(context.Context, *client.InitializeRequest) (*server.InitializeResult, error)
	// List available prompts.
	ListPrompts(context.Context, *client.ListPromptsRequest) (*server.ListPromptsResult, error)
	// List available resources.
	ListResources(context.Context, *client.ListResourcesRequest) (*server.ListResourcesResult, error)
	// List available resource templates.
	ListResourceTemplates(context.Context, *client.ListResourceTemplatesRequest) (*server.ListResourceTemplatesResult, error)
	// List available tools.
	ListTools(context.Context, *client.ListToolsRequest) (*server.ListToolsResult, error)
	// Ping the other party to check if it is still alive.
	Ping(context.Context, *client.PingRequest) (*emptypb.Empty, error)
	// Read a specific resource by URI.
	ReadResource(context.Context, *client.ReadResourceRequest) (*server.ReadResourceResult, error)
	// Set the minimum log level for notifications.
	SetLevel(context.Context, *client.SetLevelRequest) (*emptypb.Empty, error)
	// Request resources/updated notifications for a resource.
	Subscribe(context.Context, *client.SubscribeRequest) (*emptypb.Empty, error)
	// Request cancellation of resources/updated notifications.
	Unsubscribe(context.Context, *client.UnsubscribeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerServiceServer struct{}

func (UnimplementedServerServiceServer) CallTool(context.Context, *client.CallToolRequest) (*server.CallToolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTool not implemented")
}
func (UnimplementedServerServiceServer) Complete(context.Context, *client.CompleteRequest) (*server.CompleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedServerServiceServer) GetPrompt(context.Context, *client.GetPromptRequest) (*server.GetPromptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompt not implemented")
}
func (UnimplementedServerServiceServer) Initialize(context.Context, *client.InitializeRequest) (*server.InitializeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedServerServiceServer) ListPrompts(context.Context, *client.ListPromptsRequest) (*server.ListPromptsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrompts not implemented")
}
func (UnimplementedServerServiceServer) ListResources(context.Context, *client.ListResourcesRequest) (*server.ListResourcesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedServerServiceServer) ListResourceTemplates(context.Context, *client.ListResourceTemplatesRequest) (*server.ListResourceTemplatesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTemplates not implemented")
}
func (UnimplementedServerServiceServer) ListTools(context.Context, *client.ListToolsRequest) (*server.ListToolsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedServerServiceServer) Ping(context.Context, *client.PingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServerServiceServer) ReadResource(context.Context, *client.ReadResourceRequest) (*server.ReadResourceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadResource not implemented")
}
func (UnimplementedServerServiceServer) SetLevel(context.Context, *client.SetLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLevel not implemented")
}
func (UnimplementedServerServiceServer) Subscribe(context.Context, *client.SubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedServerServiceServer) Unsubscribe(context.Context, *client.UnsubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}
func (UnimplementedServerServiceServer) testEmbeddedByValue()                       {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_CallTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.CallToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CallTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_CallTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CallTool(ctx, req.(*client.CallToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Complete(ctx, req.(*client.CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.GetPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_GetPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetPrompt(ctx, req.(*client.GetPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Initialize(ctx, req.(*client.InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ListPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_ListPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListPrompts(ctx, req.(*client.ListPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListResources(ctx, req.(*client.ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListResourceTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ListResourceTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListResourceTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_ListResourceTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListResourceTemplates(ctx, req.(*client.ListResourceTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListTools(ctx, req.(*client.ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Ping(ctx, req.(*client.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ReadResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ReadResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ReadResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_ReadResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ReadResource(ctx, req.(*client.ReadResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.SetLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_SetLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetLevel(ctx, req.(*client.SetLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Subscribe(ctx, req.(*client.SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Unsubscribe(ctx, req.(*client.UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.api.v1.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallTool",
			Handler:    _ServerService_CallTool_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _ServerService_Complete_Handler,
		},
		{
			MethodName: "GetPrompt",
			Handler:    _ServerService_GetPrompt_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _ServerService_Initialize_Handler,
		},
		{
			MethodName: "ListPrompts",
			Handler:    _ServerService_ListPrompts_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _ServerService_ListResources_Handler,
		},
		{
			MethodName: "ListResourceTemplates",
			Handler:    _ServerService_ListResourceTemplates_Handler,
		},
		{
			MethodName: "ListTools",
			Handler:    _ServerService_ListTools_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServerService_Ping_Handler,
		},
		{
			MethodName: "ReadResource",
			Handler:    _ServerService_ReadResource_Handler,
		},
		{
			MethodName: "SetLevel",
			Handler:    _ServerService_SetLevel_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ServerService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ServerService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp/api/v1/server.proto",
}
