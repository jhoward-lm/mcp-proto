// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mcp/api/v1/client.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	client "pkg/mcp/client"
	server "pkg/mcp/server"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientNotificationService_Cancelled_FullMethodName        = "/mcp.api.v1.ClientNotificationService/Cancelled"
	ClientNotificationService_Initialized_FullMethodName      = "/mcp.api.v1.ClientNotificationService/Initialized"
	ClientNotificationService_Progress_FullMethodName         = "/mcp.api.v1.ClientNotificationService/Progress"
	ClientNotificationService_RootsListChanged_FullMethodName = "/mcp.api.v1.ClientNotificationService/RootsListChanged"
)

// ClientNotificationServiceClient is the client API for ClientNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service describing notifications sent by the client.
type ClientNotificationServiceClient interface {
	// Notify that a previously-issued request is being cancelled.
	Cancelled(ctx context.Context, in *client.CancelledNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify the server that initialization has finished.
	Initialized(ctx context.Context, in *client.InitializedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send a progress notification.
	Progress(ctx context.Context, in *client.ProgressNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Notify that the list of roots has changed.
	RootsListChanged(ctx context.Context, in *client.RootsListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clientNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientNotificationServiceClient(cc grpc.ClientConnInterface) ClientNotificationServiceClient {
	return &clientNotificationServiceClient{cc}
}

func (c *clientNotificationServiceClient) Cancelled(ctx context.Context, in *client.CancelledNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientNotificationService_Cancelled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientNotificationServiceClient) Initialized(ctx context.Context, in *client.InitializedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientNotificationService_Initialized_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientNotificationServiceClient) Progress(ctx context.Context, in *client.ProgressNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientNotificationService_Progress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientNotificationServiceClient) RootsListChanged(ctx context.Context, in *client.RootsListChangedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientNotificationService_RootsListChanged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientNotificationServiceServer is the server API for ClientNotificationService service.
// All implementations must embed UnimplementedClientNotificationServiceServer
// for forward compatibility.
//
// Service describing notifications sent by the client.
type ClientNotificationServiceServer interface {
	// Notify that a previously-issued request is being cancelled.
	Cancelled(context.Context, *client.CancelledNotification) (*emptypb.Empty, error)
	// Notify the server that initialization has finished.
	Initialized(context.Context, *client.InitializedNotification) (*emptypb.Empty, error)
	// Send a progress notification.
	Progress(context.Context, *client.ProgressNotification) (*emptypb.Empty, error)
	// Notify that the list of roots has changed.
	RootsListChanged(context.Context, *client.RootsListChangedNotification) (*emptypb.Empty, error)
	mustEmbedUnimplementedClientNotificationServiceServer()
}

// UnimplementedClientNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientNotificationServiceServer struct{}

func (UnimplementedClientNotificationServiceServer) Cancelled(context.Context, *client.CancelledNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancelled not implemented")
}
func (UnimplementedClientNotificationServiceServer) Initialized(context.Context, *client.InitializedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialized not implemented")
}
func (UnimplementedClientNotificationServiceServer) Progress(context.Context, *client.ProgressNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedClientNotificationServiceServer) RootsListChanged(context.Context, *client.RootsListChangedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootsListChanged not implemented")
}
func (UnimplementedClientNotificationServiceServer) mustEmbedUnimplementedClientNotificationServiceServer() {
}
func (UnimplementedClientNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeClientNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientNotificationServiceServer will
// result in compilation errors.
type UnsafeClientNotificationServiceServer interface {
	mustEmbedUnimplementedClientNotificationServiceServer()
}

func RegisterClientNotificationServiceServer(s grpc.ServiceRegistrar, srv ClientNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientNotificationService_ServiceDesc, srv)
}

func _ClientNotificationService_Cancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.CancelledNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientNotificationServiceServer).Cancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientNotificationService_Cancelled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientNotificationServiceServer).Cancelled(ctx, req.(*client.CancelledNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientNotificationService_Initialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.InitializedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientNotificationServiceServer).Initialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientNotificationService_Initialized_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientNotificationServiceServer).Initialized(ctx, req.(*client.InitializedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientNotificationService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ProgressNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientNotificationServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientNotificationService_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientNotificationServiceServer).Progress(ctx, req.(*client.ProgressNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientNotificationService_RootsListChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.RootsListChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientNotificationServiceServer).RootsListChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientNotificationService_RootsListChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientNotificationServiceServer).RootsListChanged(ctx, req.(*client.RootsListChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientNotificationService_ServiceDesc is the grpc.ServiceDesc for ClientNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.api.v1.ClientNotificationService",
	HandlerType: (*ClientNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancelled",
			Handler:    _ClientNotificationService_Cancelled_Handler,
		},
		{
			MethodName: "Initialized",
			Handler:    _ClientNotificationService_Initialized_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _ClientNotificationService_Progress_Handler,
		},
		{
			MethodName: "RootsListChanged",
			Handler:    _ClientNotificationService_RootsListChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp/api/v1/client.proto",
}

const (
	ClientService_CreateElicitation_FullMethodName = "/mcp.api.v1.ClientService/CreateElicitation"
	ClientService_CreateMessage_FullMethodName     = "/mcp.api.v1.ClientService/CreateMessage"
	ClientService_ListRoots_FullMethodName         = "/mcp.api.v1.ClientService/ListRoots"
	ClientService_Ping_FullMethodName              = "/mcp.api.v1.ClientService/Ping"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service describing available methods exposed by an MCP client.
type ClientServiceClient interface {
	// Elicit additional information from the user.
	CreateElicitation(ctx context.Context, in *server.ElicitRequest, opts ...grpc.CallOption) (*client.ElicitResult, error)
	// Instruct the client to sample an LLM and return its message.
	CreateMessage(ctx context.Context, in *server.CreateMessageRequest, opts ...grpc.CallOption) (*client.CreateMessageResult, error)
	// Request the client to list roots.
	ListRoots(ctx context.Context, in *server.ListRootsRequest, opts ...grpc.CallOption) (*client.ListRootsResult, error)
	// Ping the other party to check if it is still alive.
	Ping(ctx context.Context, in *server.PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) CreateElicitation(ctx context.Context, in *server.ElicitRequest, opts ...grpc.CallOption) (*client.ElicitResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(client.ElicitResult)
	err := c.cc.Invoke(ctx, ClientService_CreateElicitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CreateMessage(ctx context.Context, in *server.CreateMessageRequest, opts ...grpc.CallOption) (*client.CreateMessageResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(client.CreateMessageResult)
	err := c.cc.Invoke(ctx, ClientService_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ListRoots(ctx context.Context, in *server.ListRootsRequest, opts ...grpc.CallOption) (*client.ListRootsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(client.ListRootsResult)
	err := c.cc.Invoke(ctx, ClientService_ListRoots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Ping(ctx context.Context, in *server.PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
//
// Service describing available methods exposed by an MCP client.
type ClientServiceServer interface {
	// Elicit additional information from the user.
	CreateElicitation(context.Context, *server.ElicitRequest) (*client.ElicitResult, error)
	// Instruct the client to sample an LLM and return its message.
	CreateMessage(context.Context, *server.CreateMessageRequest) (*client.CreateMessageResult, error)
	// Request the client to list roots.
	ListRoots(context.Context, *server.ListRootsRequest) (*client.ListRootsResult, error)
	// Ping the other party to check if it is still alive.
	Ping(context.Context, *server.PingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) CreateElicitation(context.Context, *server.ElicitRequest) (*client.ElicitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElicitation not implemented")
}
func (UnimplementedClientServiceServer) CreateMessage(context.Context, *server.CreateMessageRequest) (*client.CreateMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedClientServiceServer) ListRoots(context.Context, *server.ListRootsRequest) (*client.ListRootsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoots not implemented")
}
func (UnimplementedClientServiceServer) Ping(context.Context, *server.PingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_CreateElicitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ElicitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateElicitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateElicitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateElicitation(ctx, req.(*server.ElicitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateMessage(ctx, req.(*server.CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ListRoots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.ListRootsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ListRoots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ListRoots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ListRoots(ctx, req.(*server.ListRootsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Ping(ctx, req.(*server.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.api.v1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateElicitation",
			Handler:    _ClientService_CreateElicitation_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _ClientService_CreateMessage_Handler,
		},
		{
			MethodName: "ListRoots",
			Handler:    _ClientService_ListRoots_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ClientService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp/api/v1/client.proto",
}
