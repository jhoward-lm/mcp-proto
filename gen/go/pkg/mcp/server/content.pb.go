// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mcp/server/v1/content.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Optional annotations for the client. The client can use annotations to inform how objects are used or displayed.
type Annotations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Describes who the intended customer of this object or data is.
	Audience []Role `protobuf:"varint,1,rep,packed,name=audience,enum=mcp.server.v1.Role" json:"audience,omitempty"`
	// Describes how important this data is for operating the server.
	Priority *float64 `protobuf:"fixed64,2,opt,name=priority" json:"priority,omitempty"`
	// The moment the resource was last modified, as an ISO 8601 formatted string.
	LastModified  *string `protobuf:"bytes,3,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{0}
}

func (x *Annotations) GetAudience() []Role {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Annotations) GetPriority() float64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Annotations) GetLastModified() string {
	if x != nil && x.LastModified != nil {
		return *x.LastModified
	}
	return ""
}

// Audio provided to or from an LLM.
type AudioContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "audio".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The base64-encoded audio data.
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// The MIME type of the audio.
	MimeType *string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	// Optional annotations for the client.
	Annotations *Annotations `protobuf:"bytes,4,opt,name=annotations" json:"annotations,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
	XMeta         *structpb.Struct `protobuf:"bytes,5,opt,name=_meta,json=Meta" json:"_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioContent) Reset() {
	*x = AudioContent{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioContent) ProtoMessage() {}

func (x *AudioContent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioContent.ProtoReflect.Descriptor instead.
func (*AudioContent) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{1}
}

func (x *AudioContent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AudioContent) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *AudioContent) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *AudioContent) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *AudioContent) GetXMeta() *structpb.Struct {
	if x != nil {
		return x.XMeta
	}
	return nil
}

// A block of content: text, image, audio, or embedded/link to a resource.
type ContentBlock struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Block:
	//
	//	*ContentBlock_Text
	//	*ContentBlock_Image
	//	*ContentBlock_Audio
	//	*ContentBlock_ResourceLink
	//	*ContentBlock_Resource
	Block         isContentBlock_Block `protobuf_oneof:"block"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentBlock) Reset() {
	*x = ContentBlock{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentBlock) ProtoMessage() {}

func (x *ContentBlock) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentBlock.ProtoReflect.Descriptor instead.
func (*ContentBlock) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{2}
}

func (x *ContentBlock) GetBlock() isContentBlock_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ContentBlock) GetText() *TextContent {
	if x != nil {
		if x, ok := x.Block.(*ContentBlock_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *ContentBlock) GetImage() *ImageContent {
	if x != nil {
		if x, ok := x.Block.(*ContentBlock_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *ContentBlock) GetAudio() *AudioContent {
	if x != nil {
		if x, ok := x.Block.(*ContentBlock_Audio); ok {
			return x.Audio
		}
	}
	return nil
}

func (x *ContentBlock) GetResourceLink() *ResourceLink {
	if x != nil {
		if x, ok := x.Block.(*ContentBlock_ResourceLink); ok {
			return x.ResourceLink
		}
	}
	return nil
}

func (x *ContentBlock) GetResource() *EmbeddedResource {
	if x != nil {
		if x, ok := x.Block.(*ContentBlock_Resource); ok {
			return x.Resource
		}
	}
	return nil
}

type isContentBlock_Block interface {
	isContentBlock_Block()
}

type ContentBlock_Text struct {
	// Text content.
	Text *TextContent `protobuf:"bytes,1,opt,name=text,oneof"`
}

type ContentBlock_Image struct {
	// Image content.
	Image *ImageContent `protobuf:"bytes,2,opt,name=image,oneof"`
}

type ContentBlock_Audio struct {
	// Audio content.
	Audio *AudioContent `protobuf:"bytes,3,opt,name=audio,oneof"`
}

type ContentBlock_ResourceLink struct {
	// Link to an external resource.
	ResourceLink *ResourceLink `protobuf:"bytes,4,opt,name=resource_link,json=resourceLink,oneof"`
}

type ContentBlock_Resource struct {
	// Embedded inline resource.
	Resource *EmbeddedResource `protobuf:"bytes,5,opt,name=resource,oneof"`
}

func (*ContentBlock_Text) isContentBlock_Block() {}

func (*ContentBlock_Image) isContentBlock_Block() {}

func (*ContentBlock_Audio) isContentBlock_Block() {}

func (*ContentBlock_ResourceLink) isContentBlock_Block() {}

func (*ContentBlock_Resource) isContentBlock_Block() {}

// The contents of a resource, embedded into a prompt or tool call result.
type EmbeddedResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "resource".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The embedded resource contents.
	Resource *ResourceContentsUnion `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	// Optional annotations for the client.
	Annotations *structpb.Struct `protobuf:"bytes,3,opt,name=annotations" json:"annotations,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
	XMeta         *structpb.Struct `protobuf:"bytes,4,opt,name=_meta,json=Meta" json:"_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddedResource) Reset() {
	*x = EmbeddedResource{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedResource) ProtoMessage() {}

func (x *EmbeddedResource) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedResource.ProtoReflect.Descriptor instead.
func (*EmbeddedResource) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{3}
}

func (x *EmbeddedResource) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EmbeddedResource) GetResource() *ResourceContentsUnion {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *EmbeddedResource) GetAnnotations() *structpb.Struct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *EmbeddedResource) GetXMeta() *structpb.Struct {
	if x != nil {
		return x.XMeta
	}
	return nil
}

// An image provided to or from an LLM.
type ImageContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "image".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The base64-encoded image data.
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// The MIME type of the image.
	MimeType *string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	// Optional annotations for the client.
	Annotations *Annotations `protobuf:"bytes,4,opt,name=annotations" json:"annotations,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
	XMeta         *structpb.Struct `protobuf:"bytes,5,opt,name=_meta,json=Meta" json:"_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageContent) Reset() {
	*x = ImageContent{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContent) ProtoMessage() {}

func (x *ImageContent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContent.ProtoReflect.Descriptor instead.
func (*ImageContent) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{4}
}

func (x *ImageContent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ImageContent) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *ImageContent) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *ImageContent) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ImageContent) GetXMeta() *structpb.Struct {
	if x != nil {
		return x.XMeta
	}
	return nil
}

// Identifies a prompt.
type PromptReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "ref/prompt".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Base metadata with name and title properties.
	Base          *BaseMetadata `protobuf:"bytes,2,opt,name=base" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptReference) Reset() {
	*x = PromptReference{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptReference) ProtoMessage() {}

func (x *PromptReference) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptReference.ProtoReflect.Descriptor instead.
func (*PromptReference) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{5}
}

func (x *PromptReference) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PromptReference) GetBase() *BaseMetadata {
	if x != nil {
		return x.Base
	}
	return nil
}

// A resource that the server is capable of reading, included in a prompt or tool call result.
type ResourceLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "resource_link".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The linked resource metadata and URI.
	Resource      *Resource `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceLink) Reset() {
	*x = ResourceLink{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLink) ProtoMessage() {}

func (x *ResourceLink) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLink.ProtoReflect.Descriptor instead.
func (*ResourceLink) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceLink) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ResourceLink) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

// A reference to a resource or resource template definition.
type ResourceTemplateReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "ref/resource".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The URI or URI template of the resource.
	Uri           *string `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTemplateReference) Reset() {
	*x = ResourceTemplateReference{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTemplateReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTemplateReference) ProtoMessage() {}

func (x *ResourceTemplateReference) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTemplateReference.ProtoReflect.Descriptor instead.
func (*ResourceTemplateReference) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceTemplateReference) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ResourceTemplateReference) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

// Text provided to or from an LLM.
type TextContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The discriminator field, always "text".
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The text content of the message.
	Text *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Optional annotations for the client.
	Annotations *Annotations `protobuf:"bytes,3,opt,name=annotations" json:"annotations,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
	XMeta         *structpb.Struct `protobuf:"bytes,4,opt,name=_meta,json=Meta" json:"_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_mcp_server_v1_content_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_content_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_content_proto_rawDescGZIP(), []int{8}
}

func (x *TextContent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *TextContent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TextContent) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *TextContent) GetXMeta() *structpb.Struct {
	if x != nil {
		return x.XMeta
	}
	return nil
}

var File_mcp_server_v1_content_proto protoreflect.FileDescriptor

const file_mcp_server_v1_content_proto_rawDesc = "" +
	"\n" +
	"\x1bmcp/server/v1/content.proto\x12\rmcp.server.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1amcp/server/v1/common.proto\x1a\x1bmcp/server/v1/results.proto\"\x7f\n" +
	"\vAnnotations\x12/\n" +
	"\baudience\x18\x01 \x03(\x0e2\x13.mcp.server.v1.RoleR\baudience\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\x01R\bpriority\x12#\n" +
	"\rlast_modified\x18\x03 \x01(\tR\flastModified\"\xbf\x01\n" +
	"\fAudioContent\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12<\n" +
	"\vannotations\x18\x04 \x01(\v2\x1a.mcp.server.v1.AnnotationsR\vannotations\x12,\n" +
	"\x05_meta\x18\x05 \x01(\v2\x17.google.protobuf.StructR\x04Meta\"\xb6\x02\n" +
	"\fContentBlock\x120\n" +
	"\x04text\x18\x01 \x01(\v2\x1a.mcp.server.v1.TextContentH\x00R\x04text\x123\n" +
	"\x05image\x18\x02 \x01(\v2\x1b.mcp.server.v1.ImageContentH\x00R\x05image\x123\n" +
	"\x05audio\x18\x03 \x01(\v2\x1b.mcp.server.v1.AudioContentH\x00R\x05audio\x12B\n" +
	"\rresource_link\x18\x04 \x01(\v2\x1b.mcp.server.v1.ResourceLinkH\x00R\fresourceLink\x12=\n" +
	"\bresource\x18\x05 \x01(\v2\x1f.mcp.server.v1.EmbeddedResourceH\x00R\bresourceB\a\n" +
	"\x05block\"\xd1\x01\n" +
	"\x10EmbeddedResource\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12@\n" +
	"\bresource\x18\x02 \x01(\v2$.mcp.server.v1.ResourceContentsUnionR\bresource\x129\n" +
	"\vannotations\x18\x03 \x01(\v2\x17.google.protobuf.StructR\vannotations\x12,\n" +
	"\x05_meta\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04Meta\"\xbf\x01\n" +
	"\fImageContent\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12<\n" +
	"\vannotations\x18\x04 \x01(\v2\x1a.mcp.server.v1.AnnotationsR\vannotations\x12,\n" +
	"\x05_meta\x18\x05 \x01(\v2\x17.google.protobuf.StructR\x04Meta\"V\n" +
	"\x0fPromptReference\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12/\n" +
	"\x04base\x18\x02 \x01(\v2\x1b.mcp.server.v1.BaseMetadataR\x04base\"W\n" +
	"\fResourceLink\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x123\n" +
	"\bresource\x18\x02 \x01(\v2\x17.mcp.server.v1.ResourceR\bresource\"A\n" +
	"\x19ResourceTemplateReference\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x10\n" +
	"\x03uri\x18\x02 \x01(\tR\x03uri\"\xa1\x01\n" +
	"\vTextContent\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12<\n" +
	"\vannotations\x18\x03 \x01(\v2\x1a.mcp.server.v1.AnnotationsR\vannotations\x12,\n" +
	"\x05_meta\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04MetaB\x8c\x01\n" +
	"\x14org.mcp.server.modelB\fContentProtoH\x01P\x01Z\x0epkg/mcp/server\xa2\x02\x03MSX\xaa\x02\rMcp.Server.V1\xca\x02\rMcp\\Server\\V1\xe2\x02\x19Mcp\\Server\\V1\\GPBMetadata\xea\x02\x0fMcp::Server::V1b\beditionsp\xe8\a"

var (
	file_mcp_server_v1_content_proto_rawDescOnce sync.Once
	file_mcp_server_v1_content_proto_rawDescData []byte
)

func file_mcp_server_v1_content_proto_rawDescGZIP() []byte {
	file_mcp_server_v1_content_proto_rawDescOnce.Do(func() {
		file_mcp_server_v1_content_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcp_server_v1_content_proto_rawDesc), len(file_mcp_server_v1_content_proto_rawDesc)))
	})
	return file_mcp_server_v1_content_proto_rawDescData
}

var file_mcp_server_v1_content_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mcp_server_v1_content_proto_goTypes = []any{
	(*Annotations)(nil),               // 0: mcp.server.v1.Annotations
	(*AudioContent)(nil),              // 1: mcp.server.v1.AudioContent
	(*ContentBlock)(nil),              // 2: mcp.server.v1.ContentBlock
	(*EmbeddedResource)(nil),          // 3: mcp.server.v1.EmbeddedResource
	(*ImageContent)(nil),              // 4: mcp.server.v1.ImageContent
	(*PromptReference)(nil),           // 5: mcp.server.v1.PromptReference
	(*ResourceLink)(nil),              // 6: mcp.server.v1.ResourceLink
	(*ResourceTemplateReference)(nil), // 7: mcp.server.v1.ResourceTemplateReference
	(*TextContent)(nil),               // 8: mcp.server.v1.TextContent
	(Role)(0),                         // 9: mcp.server.v1.Role
	(*structpb.Struct)(nil),           // 10: google.protobuf.Struct
	(*ResourceContentsUnion)(nil),     // 11: mcp.server.v1.ResourceContentsUnion
	(*BaseMetadata)(nil),              // 12: mcp.server.v1.BaseMetadata
	(*Resource)(nil),                  // 13: mcp.server.v1.Resource
}
var file_mcp_server_v1_content_proto_depIdxs = []int32{
	9,  // 0: mcp.server.v1.Annotations.audience:type_name -> mcp.server.v1.Role
	0,  // 1: mcp.server.v1.AudioContent.annotations:type_name -> mcp.server.v1.Annotations
	10, // 2: mcp.server.v1.AudioContent._meta:type_name -> google.protobuf.Struct
	8,  // 3: mcp.server.v1.ContentBlock.text:type_name -> mcp.server.v1.TextContent
	4,  // 4: mcp.server.v1.ContentBlock.image:type_name -> mcp.server.v1.ImageContent
	1,  // 5: mcp.server.v1.ContentBlock.audio:type_name -> mcp.server.v1.AudioContent
	6,  // 6: mcp.server.v1.ContentBlock.resource_link:type_name -> mcp.server.v1.ResourceLink
	3,  // 7: mcp.server.v1.ContentBlock.resource:type_name -> mcp.server.v1.EmbeddedResource
	11, // 8: mcp.server.v1.EmbeddedResource.resource:type_name -> mcp.server.v1.ResourceContentsUnion
	10, // 9: mcp.server.v1.EmbeddedResource.annotations:type_name -> google.protobuf.Struct
	10, // 10: mcp.server.v1.EmbeddedResource._meta:type_name -> google.protobuf.Struct
	0,  // 11: mcp.server.v1.ImageContent.annotations:type_name -> mcp.server.v1.Annotations
	10, // 12: mcp.server.v1.ImageContent._meta:type_name -> google.protobuf.Struct
	12, // 13: mcp.server.v1.PromptReference.base:type_name -> mcp.server.v1.BaseMetadata
	13, // 14: mcp.server.v1.ResourceLink.resource:type_name -> mcp.server.v1.Resource
	0,  // 15: mcp.server.v1.TextContent.annotations:type_name -> mcp.server.v1.Annotations
	10, // 16: mcp.server.v1.TextContent._meta:type_name -> google.protobuf.Struct
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_mcp_server_v1_content_proto_init() }
func file_mcp_server_v1_content_proto_init() {
	if File_mcp_server_v1_content_proto != nil {
		return
	}
	file_mcp_server_v1_common_proto_init()
	file_mcp_server_v1_results_proto_init()
	file_mcp_server_v1_content_proto_msgTypes[2].OneofWrappers = []any{
		(*ContentBlock_Text)(nil),
		(*ContentBlock_Image)(nil),
		(*ContentBlock_Audio)(nil),
		(*ContentBlock_ResourceLink)(nil),
		(*ContentBlock_Resource)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcp_server_v1_content_proto_rawDesc), len(file_mcp_server_v1_content_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcp_server_v1_content_proto_goTypes,
		DependencyIndexes: file_mcp_server_v1_content_proto_depIdxs,
		MessageInfos:      file_mcp_server_v1_content_proto_msgTypes,
	}.Build()
	File_mcp_server_v1_content_proto = out.File
	file_mcp_server_v1_content_proto_goTypes = nil
	file_mcp_server_v1_content_proto_depIdxs = nil
}
