// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mcp/server/v1/json_rpc.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A response to a request that indicates an error occurred.
type JSONRPCError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JSON-RPC version.
	Jsonrpc *string `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	// A uniquely identifying ID for a request in JSON-RPC.
	Id *RequestId `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The error details.
	Error         *ErrorDetails `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONRPCError) Reset() {
	*x = JSONRPCError{}
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONRPCError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONRPCError) ProtoMessage() {}

func (x *JSONRPCError) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONRPCError.ProtoReflect.Descriptor instead.
func (*JSONRPCError) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_json_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *JSONRPCError) GetJsonrpc() string {
	if x != nil && x.Jsonrpc != nil {
		return *x.Jsonrpc
	}
	return ""
}

func (x *JSONRPCError) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JSONRPCError) GetError() *ErrorDetails {
	if x != nil {
		return x.Error
	}
	return nil
}

// Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent.
type JSONRPCMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*JSONRPCMessage_Request
	//	*JSONRPCMessage_Notification
	//	*JSONRPCMessage_Response
	//	*JSONRPCMessage_Error
	Msg           isJSONRPCMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONRPCMessage) Reset() {
	*x = JSONRPCMessage{}
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONRPCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONRPCMessage) ProtoMessage() {}

func (x *JSONRPCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONRPCMessage.ProtoReflect.Descriptor instead.
func (*JSONRPCMessage) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_json_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *JSONRPCMessage) GetMsg() isJSONRPCMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *JSONRPCMessage) GetRequest() *JSONRPCRequest {
	if x != nil {
		if x, ok := x.Msg.(*JSONRPCMessage_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *JSONRPCMessage) GetNotification() *JSONRPCNotification {
	if x != nil {
		if x, ok := x.Msg.(*JSONRPCMessage_Notification); ok {
			return x.Notification
		}
	}
	return nil
}

func (x *JSONRPCMessage) GetResponse() *JSONRPCResponse {
	if x != nil {
		if x, ok := x.Msg.(*JSONRPCMessage_Response); ok {
			return x.Response
		}
	}
	return nil
}

func (x *JSONRPCMessage) GetError() *JSONRPCError {
	if x != nil {
		if x, ok := x.Msg.(*JSONRPCMessage_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isJSONRPCMessage_Msg interface {
	isJSONRPCMessage_Msg()
}

type JSONRPCMessage_Request struct {
	// JSON-RPC request.
	Request *JSONRPCRequest `protobuf:"bytes,1,opt,name=request,oneof"`
}

type JSONRPCMessage_Notification struct {
	// JSON-RPC notification.
	Notification *JSONRPCNotification `protobuf:"bytes,2,opt,name=notification,oneof"`
}

type JSONRPCMessage_Response struct {
	// JSON-RPC response.
	Response *JSONRPCResponse `protobuf:"bytes,3,opt,name=response,oneof"`
}

type JSONRPCMessage_Error struct {
	// JSON-RPC error.
	Error *JSONRPCError `protobuf:"bytes,4,opt,name=error,oneof"`
}

func (*JSONRPCMessage_Request) isJSONRPCMessage_Msg() {}

func (*JSONRPCMessage_Notification) isJSONRPCMessage_Msg() {}

func (*JSONRPCMessage_Response) isJSONRPCMessage_Msg() {}

func (*JSONRPCMessage_Error) isJSONRPCMessage_Msg() {}

// A notification which does not expect a response.
type JSONRPCNotification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JSON-RPC version.
	Jsonrpc *string `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	// The method to invoke.
	Method *string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// The notification parameters.
	Params        *structpb.Struct `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONRPCNotification) Reset() {
	*x = JSONRPCNotification{}
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONRPCNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONRPCNotification) ProtoMessage() {}

func (x *JSONRPCNotification) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONRPCNotification.ProtoReflect.Descriptor instead.
func (*JSONRPCNotification) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_json_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *JSONRPCNotification) GetJsonrpc() string {
	if x != nil && x.Jsonrpc != nil {
		return *x.Jsonrpc
	}
	return ""
}

func (x *JSONRPCNotification) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *JSONRPCNotification) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// A request that expects a response.
type JSONRPCRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JSON-RPC version.
	Jsonrpc *string `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	// A uniquely identifying ID for a request in JSON-RPC.
	Id *RequestId `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The method to invoke.
	Method *string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	// The request parameters.
	Params        *structpb.Struct `protobuf:"bytes,4,opt,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONRPCRequest) Reset() {
	*x = JSONRPCRequest{}
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONRPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONRPCRequest) ProtoMessage() {}

func (x *JSONRPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONRPCRequest.ProtoReflect.Descriptor instead.
func (*JSONRPCRequest) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_json_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *JSONRPCRequest) GetJsonrpc() string {
	if x != nil && x.Jsonrpc != nil {
		return *x.Jsonrpc
	}
	return ""
}

func (x *JSONRPCRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JSONRPCRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *JSONRPCRequest) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// A successful (non-error) response to a request.
type JSONRPCResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JSON-RPC version.
	Jsonrpc *string `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	// A uniquely identifying ID for a request in JSON-RPC.
	Id *RequestId `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The result of the request.
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONRPCResponse) Reset() {
	*x = JSONRPCResponse{}
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONRPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONRPCResponse) ProtoMessage() {}

func (x *JSONRPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_server_v1_json_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONRPCResponse.ProtoReflect.Descriptor instead.
func (*JSONRPCResponse) Descriptor() ([]byte, []int) {
	return file_mcp_server_v1_json_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *JSONRPCResponse) GetJsonrpc() string {
	if x != nil && x.Jsonrpc != nil {
		return *x.Jsonrpc
	}
	return ""
}

func (x *JSONRPCResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JSONRPCResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_mcp_server_v1_json_rpc_proto protoreflect.FileDescriptor

const file_mcp_server_v1_json_rpc_proto_rawDesc = "" +
	"\n" +
	"\x1cmcp/server/v1/json_rpc.proto\x12\rmcp.server.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1amcp/server/v1/common.proto\"\x85\x01\n" +
	"\fJSONRPCError\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12(\n" +
	"\x02id\x18\x02 \x01(\v2\x18.mcp.server.v1.RequestIdR\x02id\x121\n" +
	"\x05error\x18\x03 \x01(\v2\x1b.mcp.server.v1.ErrorDetailsR\x05error\"\x8f\x02\n" +
	"\x0eJSONRPCMessage\x129\n" +
	"\arequest\x18\x01 \x01(\v2\x1d.mcp.server.v1.JSONRPCRequestH\x00R\arequest\x12H\n" +
	"\fnotification\x18\x02 \x01(\v2\".mcp.server.v1.JSONRPCNotificationH\x00R\fnotification\x12<\n" +
	"\bresponse\x18\x03 \x01(\v2\x1e.mcp.server.v1.JSONRPCResponseH\x00R\bresponse\x123\n" +
	"\x05error\x18\x04 \x01(\v2\x1b.mcp.server.v1.JSONRPCErrorH\x00R\x05errorB\x05\n" +
	"\x03msg\"x\n" +
	"\x13JSONRPCNotification\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12/\n" +
	"\x06params\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x06params\"\x9d\x01\n" +
	"\x0eJSONRPCRequest\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12(\n" +
	"\x02id\x18\x02 \x01(\v2\x18.mcp.server.v1.RequestIdR\x02id\x12\x16\n" +
	"\x06method\x18\x03 \x01(\tR\x06method\x12/\n" +
	"\x06params\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x06params\"\x84\x01\n" +
	"\x0fJSONRPCResponse\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12(\n" +
	"\x02id\x18\x02 \x01(\v2\x18.mcp.server.v1.RequestIdR\x02id\x12-\n" +
	"\x06result\x18\x03 \x01(\v2\x15.mcp.server.v1.ResultR\x06resultB\x8c\x01\n" +
	"\x14org.mcp.server.modelB\fJsonRpcProtoH\x01P\x01Z\x0epkg/mcp/server\xa2\x02\x03MSX\xaa\x02\rMcp.Server.V1\xca\x02\rMcp\\Server\\V1\xe2\x02\x19Mcp\\Server\\V1\\GPBMetadata\xea\x02\x0fMcp::Server::V1b\beditionsp\xe8\a"

var (
	file_mcp_server_v1_json_rpc_proto_rawDescOnce sync.Once
	file_mcp_server_v1_json_rpc_proto_rawDescData []byte
)

func file_mcp_server_v1_json_rpc_proto_rawDescGZIP() []byte {
	file_mcp_server_v1_json_rpc_proto_rawDescOnce.Do(func() {
		file_mcp_server_v1_json_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcp_server_v1_json_rpc_proto_rawDesc), len(file_mcp_server_v1_json_rpc_proto_rawDesc)))
	})
	return file_mcp_server_v1_json_rpc_proto_rawDescData
}

var file_mcp_server_v1_json_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mcp_server_v1_json_rpc_proto_goTypes = []any{
	(*JSONRPCError)(nil),        // 0: mcp.server.v1.JSONRPCError
	(*JSONRPCMessage)(nil),      // 1: mcp.server.v1.JSONRPCMessage
	(*JSONRPCNotification)(nil), // 2: mcp.server.v1.JSONRPCNotification
	(*JSONRPCRequest)(nil),      // 3: mcp.server.v1.JSONRPCRequest
	(*JSONRPCResponse)(nil),     // 4: mcp.server.v1.JSONRPCResponse
	(*RequestId)(nil),           // 5: mcp.server.v1.RequestId
	(*ErrorDetails)(nil),        // 6: mcp.server.v1.ErrorDetails
	(*structpb.Struct)(nil),     // 7: google.protobuf.Struct
	(*Result)(nil),              // 8: mcp.server.v1.Result
}
var file_mcp_server_v1_json_rpc_proto_depIdxs = []int32{
	5,  // 0: mcp.server.v1.JSONRPCError.id:type_name -> mcp.server.v1.RequestId
	6,  // 1: mcp.server.v1.JSONRPCError.error:type_name -> mcp.server.v1.ErrorDetails
	3,  // 2: mcp.server.v1.JSONRPCMessage.request:type_name -> mcp.server.v1.JSONRPCRequest
	2,  // 3: mcp.server.v1.JSONRPCMessage.notification:type_name -> mcp.server.v1.JSONRPCNotification
	4,  // 4: mcp.server.v1.JSONRPCMessage.response:type_name -> mcp.server.v1.JSONRPCResponse
	0,  // 5: mcp.server.v1.JSONRPCMessage.error:type_name -> mcp.server.v1.JSONRPCError
	7,  // 6: mcp.server.v1.JSONRPCNotification.params:type_name -> google.protobuf.Struct
	5,  // 7: mcp.server.v1.JSONRPCRequest.id:type_name -> mcp.server.v1.RequestId
	7,  // 8: mcp.server.v1.JSONRPCRequest.params:type_name -> google.protobuf.Struct
	5,  // 9: mcp.server.v1.JSONRPCResponse.id:type_name -> mcp.server.v1.RequestId
	8,  // 10: mcp.server.v1.JSONRPCResponse.result:type_name -> mcp.server.v1.Result
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mcp_server_v1_json_rpc_proto_init() }
func file_mcp_server_v1_json_rpc_proto_init() {
	if File_mcp_server_v1_json_rpc_proto != nil {
		return
	}
	file_mcp_server_v1_common_proto_init()
	file_mcp_server_v1_json_rpc_proto_msgTypes[1].OneofWrappers = []any{
		(*JSONRPCMessage_Request)(nil),
		(*JSONRPCMessage_Notification)(nil),
		(*JSONRPCMessage_Response)(nil),
		(*JSONRPCMessage_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcp_server_v1_json_rpc_proto_rawDesc), len(file_mcp_server_v1_json_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcp_server_v1_json_rpc_proto_goTypes,
		DependencyIndexes: file_mcp_server_v1_json_rpc_proto_depIdxs,
		MessageInfos:      file_mcp_server_v1_json_rpc_proto_msgTypes,
	}.Build()
	File_mcp_server_v1_json_rpc_proto = out.File
	file_mcp_server_v1_json_rpc_proto_goTypes = nil
	file_mcp_server_v1_json_rpc_proto_depIdxs = nil
}
